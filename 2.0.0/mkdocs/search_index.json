{
    "docs": [
        {
            "location": "/",
            "text": "What's OpenVeo Devices API?\n\n\nOpenVeo Devices API is an \nOpenVeo\n plugin.\n\n\nOpenVeo Devices API offers an API to interact and control devices through OpenVeo Socket namespaces. Actually there is only one device supported, the \nVeobox\n.\n\n\nNb:\n OpenVeo Devices API does not create any back end or front end pages.",
            "title": "INTRODUCTION"
        },
        {
            "location": "/#whats-openveo-devices-api",
            "text": "OpenVeo Devices API is an  OpenVeo  plugin.  OpenVeo Devices API offers an API to interact and control devices through OpenVeo Socket namespaces. Actually there is only one device supported, the  Veobox .  Nb:  OpenVeo Devices API does not create any back end or front end pages.",
            "title": "What's OpenVeo Devices API?"
        },
        {
            "location": "/pluginsDevelopers/getting-started/",
            "text": "Installation\n\n\nFrom OpenVeo root :\n\n\nnpm install @openveo/devices-api --production\n\n\n\nSetup your devices\n\n\nConfigure your devices to establish a socket connection on your OpenVeo socket server with namespace \n/devices-api/DEVICE_TYPE\n, replacing DEVICE_TYPE by the type of devices you want to communicate with (only \nveobox\n is supported right now).\n\n\nUse API\n\n\nYou can now use the OpenVeo Devices API to get information from your devices :\n\n\nvar devicesApi = process.api.getApi('devices-api');\nvar DEVICES_TYPES = devicesApi.getDevicesTypes();\nvar pilot = devicesApi.getPilot(DEVICES_TYPES.VEOBOX);\n\npilot.on(pilot.EVENTS.AUTHENTICATED, function(id, deviceIp, socketId) {\n  console.log('New device connected with id ' + id + ' and ip ' + deviceIp);\n});\n\n\n\n\nOr control your devices :\n\n\nvar devicesApi = process.api.getApi('devices-api');\nvar DEVICES_TYPES = devicesApi.getDevicesTypes();\nvar pilot = devicesApi.getPilot(DEVICES_TYPES.VEOBOX);\n\npilot.askForStartRecord([deviceId], null, function(results) {\n  console.log('Device ' + deviceId + ' is starting');\n});\n\n\n\n\nSee the \nAPI\n for more information.",
            "title": "Getting started"
        },
        {
            "location": "/pluginsDevelopers/getting-started/#installation",
            "text": "From OpenVeo root :  npm install @openveo/devices-api --production",
            "title": "Installation"
        },
        {
            "location": "/pluginsDevelopers/getting-started/#setup-your-devices",
            "text": "Configure your devices to establish a socket connection on your OpenVeo socket server with namespace  /devices-api/DEVICE_TYPE , replacing DEVICE_TYPE by the type of devices you want to communicate with (only  veobox  is supported right now).",
            "title": "Setup your devices"
        },
        {
            "location": "/pluginsDevelopers/getting-started/#use-api",
            "text": "You can now use the OpenVeo Devices API to get information from your devices :  var devicesApi = process.api.getApi('devices-api');\nvar DEVICES_TYPES = devicesApi.getDevicesTypes();\nvar pilot = devicesApi.getPilot(DEVICES_TYPES.VEOBOX);\n\npilot.on(pilot.EVENTS.AUTHENTICATED, function(id, deviceIp, socketId) {\n  console.log('New device connected with id ' + id + ' and ip ' + deviceIp);\n});  Or control your devices :  var devicesApi = process.api.getApi('devices-api');\nvar DEVICES_TYPES = devicesApi.getDevicesTypes();\nvar pilot = devicesApi.getPilot(DEVICES_TYPES.VEOBOX);\n\npilot.askForStartRecord([deviceId], null, function(results) {\n  console.log('Device ' + deviceId + ' is starting');\n});  See the  API  for more information.",
            "title": "Use API"
        },
        {
            "location": "/pluginsDevelopers/api/",
            "text": "Server side API (Node.js)\n\n\nThe \nOpenVeo Devices API\n helps you communicate with socket based devices inside your OpenVeo plugins.\n\n\nYou can use process.api to get the OpenVeo Devices API :\n\n\nvar devicesApi = process.api.getApi('devices-api');",
            "title": "API"
        },
        {
            "location": "/pluginsDevelopers/api/#server-side-api-nodejs",
            "text": "The  OpenVeo Devices API  helps you communicate with socket based devices inside your OpenVeo plugins.  You can use process.api to get the OpenVeo Devices API :  var devicesApi = process.api.getApi('devices-api');",
            "title": "Server side API (Node.js)"
        },
        {
            "location": "/developers/installation/",
            "text": "Installation\n\n\nTo install OpenVeo Devices API you first need to install OpenVeo Core if not already done.\n\n\nOpenVeo Core\n\n\nInstall @openveo/core package\n\n\n# Move to your workspace directory\ncd /WORKSPACE_PATH\n\n# Create directory for OpenVeo core\nmkdir openveo-core\n\n# Install OpenVeo core in this directory\ncd /WORKSPACE_PATH/openveo-core\nnpm install @openveo/core\n\n\n\nYour workspace should look like this:\n\n\n.\n\u251c\u2500\u2500 openveo-core\n\n\n\n\nCreate NPM links for openveo-api and openveo-test\n\n\nIn a classical NPM project @openveo/devices-api package should be installed in /WORKSPACE_PATH/openveo-core/node_modules/@openveo/core/node_modules/@openveo/devices-api. For development, the first thing which comes to mind is to create a clone of the OpenVeo Devices API project inside this repository. But doing this will prevent npm install from working and will create a complicated development architecture with the risk to erase the repository at any time.\n\n\nWe use \nNPM links\n to deal with this problem and store OpenVeo Devices API inside /WORKSPACE_PATH/openveo-devices-api. But there is a catch. OpenVeo Devices API need both @openveo/api and @openveo/test of the core. As packages @openveo/devices-api and @openveo/core are installed in two different locations, package @openveo/devices-api won't find @openveo/api nor @openveo/test in its Node.JS path. That's why we have to create NPM links for both @openveo/api and @openveo/test and refer to it inside @openveo/devices-api.\n\n\n# Create a link for @openveo/api\ncd /WORKSPACE_PATH/openveo-core/node_modules/@openveo/core/node_modules/@openveo/api\nnpm link\n\n# Create a link for @openveo/test\ncd /WORKSPACE_PATH/openveo-core/node_modules/@openveo/core/node_modules/@openveo/test\nnpm link\n\n\n\nOpenVeo Devices API\n\n\nClone project from git\n\n\n# Clone project into workspace\ncd /WORKSPACE_PATH/\ngit clone git@github.com:veo-labs/openveo-devices-api.git\n\n\n\nYour workspace should look like this:\n\n\n.\n\u251c\u2500\u2500 openveo-core\n\u251c\u2500\u2500 openveo-devices-api\n\n\n\n\nLink openveo-api and openveo-test\n\n\nWhen installing OpenVeo Core we created NPM links for @openveo/api and @openveo/test. We can now refer to this links.\n\n\n# Install dependencies @openveo/api and @openveo/test using NPM links\ncd /WORKSPACE_PATH/openveo-devices-api\nnpm link @openveo/api\nnpm link @openveo/test\n\n\n\nInstall project's dependencies\n\n\ncd /WORKSPACE_PATH/openveo-devices-api\nnpm install\n\n\n\nInstall plugin\n\n\nTo be able to install @openveo/devices-api in @openveo/core we create an NPM link of @openveo/devices-api and refer to it in the core.\n\n\nCreate an NPM link\n\n\n# Create a link for @openveo/devices-api\ncd /WORKSPACE_PATH/openveo-devices-api\nnpm link\n\n\n\nLink project to the core\n\n\n# Install dependency @openveo/devices-api using NPM links\ncd /WORKSPACE_PATH/openveo-core\nnpm link @openveo/devices-api",
            "title": "Installation"
        },
        {
            "location": "/developers/installation/#installation",
            "text": "To install OpenVeo Devices API you first need to install OpenVeo Core if not already done.",
            "title": "Installation"
        },
        {
            "location": "/developers/installation/#openveo-core",
            "text": "",
            "title": "OpenVeo Core"
        },
        {
            "location": "/developers/installation/#install-openveocore-package",
            "text": "# Move to your workspace directory\ncd /WORKSPACE_PATH\n\n# Create directory for OpenVeo core\nmkdir openveo-core\n\n# Install OpenVeo core in this directory\ncd /WORKSPACE_PATH/openveo-core\nnpm install @openveo/core  Your workspace should look like this:  .\n\u251c\u2500\u2500 openveo-core",
            "title": "Install @openveo/core package"
        },
        {
            "location": "/developers/installation/#create-npm-links-for-openveo-api-and-openveo-test",
            "text": "In a classical NPM project @openveo/devices-api package should be installed in /WORKSPACE_PATH/openveo-core/node_modules/@openveo/core/node_modules/@openveo/devices-api. For development, the first thing which comes to mind is to create a clone of the OpenVeo Devices API project inside this repository. But doing this will prevent npm install from working and will create a complicated development architecture with the risk to erase the repository at any time.  We use  NPM links  to deal with this problem and store OpenVeo Devices API inside /WORKSPACE_PATH/openveo-devices-api. But there is a catch. OpenVeo Devices API need both @openveo/api and @openveo/test of the core. As packages @openveo/devices-api and @openveo/core are installed in two different locations, package @openveo/devices-api won't find @openveo/api nor @openveo/test in its Node.JS path. That's why we have to create NPM links for both @openveo/api and @openveo/test and refer to it inside @openveo/devices-api.  # Create a link for @openveo/api\ncd /WORKSPACE_PATH/openveo-core/node_modules/@openveo/core/node_modules/@openveo/api\nnpm link\n\n# Create a link for @openveo/test\ncd /WORKSPACE_PATH/openveo-core/node_modules/@openveo/core/node_modules/@openveo/test\nnpm link",
            "title": "Create NPM links for openveo-api and openveo-test"
        },
        {
            "location": "/developers/installation/#openveo-devices-api",
            "text": "",
            "title": "OpenVeo Devices API"
        },
        {
            "location": "/developers/installation/#clone-project-from-git",
            "text": "# Clone project into workspace\ncd /WORKSPACE_PATH/\ngit clone git@github.com:veo-labs/openveo-devices-api.git  Your workspace should look like this:  .\n\u251c\u2500\u2500 openveo-core\n\u251c\u2500\u2500 openveo-devices-api",
            "title": "Clone project from git"
        },
        {
            "location": "/developers/installation/#link-openveo-api-and-openveo-test",
            "text": "When installing OpenVeo Core we created NPM links for @openveo/api and @openveo/test. We can now refer to this links.  # Install dependencies @openveo/api and @openveo/test using NPM links\ncd /WORKSPACE_PATH/openveo-devices-api\nnpm link @openveo/api\nnpm link @openveo/test",
            "title": "Link openveo-api and openveo-test"
        },
        {
            "location": "/developers/installation/#install-projects-dependencies",
            "text": "cd /WORKSPACE_PATH/openveo-devices-api\nnpm install",
            "title": "Install project's dependencies"
        },
        {
            "location": "/developers/installation/#install-plugin",
            "text": "To be able to install @openveo/devices-api in @openveo/core we create an NPM link of @openveo/devices-api and refer to it in the core.",
            "title": "Install plugin"
        },
        {
            "location": "/developers/installation/#create-an-npm-link",
            "text": "# Create a link for @openveo/devices-api\ncd /WORKSPACE_PATH/openveo-devices-api\nnpm link",
            "title": "Create an NPM link"
        },
        {
            "location": "/developers/installation/#link-project-to-the-core",
            "text": "# Install dependency @openveo/devices-api using NPM links\ncd /WORKSPACE_PATH/openveo-core\nnpm link @openveo/devices-api",
            "title": "Link project to the core"
        },
        {
            "location": "/developers/unit-tests/",
            "text": "Node.js unit tests\n\n\nServer side unit tests are performed using \nMocha\n and \nChai\n. You can launch server unit tests with the following command (from plugin's root directory):\n\n\ngrunt mochaTest",
            "title": "Unit tests"
        },
        {
            "location": "/developers/unit-tests/#nodejs-unit-tests",
            "text": "Server side unit tests are performed using  Mocha  and  Chai . You can launch server unit tests with the following command (from plugin's root directory):  grunt mochaTest",
            "title": "Node.js unit tests"
        }
    ]
}