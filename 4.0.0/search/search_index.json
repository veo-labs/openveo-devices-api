{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What's OpenVeo Devices API? OpenVeo Devices API is an OpenVeo plugin. OpenVeo Devices API offers an API to interact and control devices through OpenVeo Socket namespaces. Actually there is only one device supported, the Veobox . Nb: OpenVeo Devices API does not create any back end or front end pages.","title":"INTRODUCTION"},{"location":"#whats-openveo-devices-api","text":"OpenVeo Devices API is an OpenVeo plugin. OpenVeo Devices API offers an API to interact and control devices through OpenVeo Socket namespaces. Actually there is only one device supported, the Veobox . Nb: OpenVeo Devices API does not create any back end or front end pages.","title":"What's OpenVeo Devices API?"},{"location":"developers/installation/","text":"Installation To install OpenVeo Devices API you first need to install OpenVeo Core if not already done. OpenVeo Core Install @openveo/core package # Move to your workspace directory cd /WORKSPACE_PATH # Create directory for OpenVeo core mkdir openveo-core # Install OpenVeo core in this directory # See OpenVeo core documentation for more information Your workspace should look like this: . \u251c\u2500\u2500 openveo-core Create NPM links for openveo-api and openveo-test In a classical NPM project @openveo/devices-api package should be installed in /WORKSPACE_PATH/openveo-core/node_modules/@openveo/core/node_modules/@openveo/devices-api. For development, the first thing which comes to mind is to create a clone of the OpenVeo Devices API project inside this repository. But doing this will prevent npm install from working and will create a complicated development architecture with the risk to erase the repository at any time. We use NPM links to deal with this problem and store OpenVeo Devices API inside /WORKSPACE_PATH/openveo-devices-api. But there is a catch. OpenVeo Devices API need both @openveo/api and @openveo/test of the core. As packages @openveo/devices-api and @openveo/core are installed in two different locations, package @openveo/devices-api won't find @openveo/api nor @openveo/test in its Node.JS path. That's why we have to create NPM links for both @openveo/api and @openveo/test and refer to it inside @openveo/devices-api. # Create a link for @openveo/api cd /WORKSPACE_PATH/openveo-core/node_modules/@openveo/core/node_modules/@openveo/api npm link # Create a link for @openveo/test cd /WORKSPACE_PATH/openveo-core/node_modules/@openveo/core/node_modules/@openveo/test npm link OpenVeo Devices API Clone project from git # Clone project into workspace cd /WORKSPACE_PATH/ git clone git@github.com:veo-labs/openveo-devices-api.git Your workspace should look like this: . \u251c\u2500\u2500 openveo-core \u251c\u2500\u2500 openveo-devices-api Install project's dependencies cd /WORKSPACE_PATH/openveo-devices-api npm ci Link openveo-api and openveo-test When installing OpenVeo Core we created NPM links for @openveo/api and @openveo/test. We can now refer to this links. # Install dependencies @openveo/api and @openveo/test using NPM links cd /WORKSPACE_PATH/openveo-devices-api npm link @openveo/api @openveo/test Install plugin To be able to install @openveo/devices-api in @openveo/core we create an NPM link of @openveo/devices-api and refer to it in the core. Create an NPM link # Create a link for @openveo/devices-api cd /WORKSPACE_PATH/openveo-devices-api npm link Link project to the core # Install dependency @openveo/devices-api using NPM links cd /WORKSPACE_PATH/openveo-core npm link @openveo/devices-api","title":"Installation"},{"location":"developers/installation/#installation","text":"To install OpenVeo Devices API you first need to install OpenVeo Core if not already done.","title":"Installation"},{"location":"developers/installation/#openveo-core","text":"","title":"OpenVeo Core"},{"location":"developers/installation/#install-openveocore-package","text":"# Move to your workspace directory cd /WORKSPACE_PATH # Create directory for OpenVeo core mkdir openveo-core # Install OpenVeo core in this directory # See OpenVeo core documentation for more information Your workspace should look like this: . \u251c\u2500\u2500 openveo-core","title":"Install @openveo/core package"},{"location":"developers/installation/#create-npm-links-for-openveo-api-and-openveo-test","text":"In a classical NPM project @openveo/devices-api package should be installed in /WORKSPACE_PATH/openveo-core/node_modules/@openveo/core/node_modules/@openveo/devices-api. For development, the first thing which comes to mind is to create a clone of the OpenVeo Devices API project inside this repository. But doing this will prevent npm install from working and will create a complicated development architecture with the risk to erase the repository at any time. We use NPM links to deal with this problem and store OpenVeo Devices API inside /WORKSPACE_PATH/openveo-devices-api. But there is a catch. OpenVeo Devices API need both @openveo/api and @openveo/test of the core. As packages @openveo/devices-api and @openveo/core are installed in two different locations, package @openveo/devices-api won't find @openveo/api nor @openveo/test in its Node.JS path. That's why we have to create NPM links for both @openveo/api and @openveo/test and refer to it inside @openveo/devices-api. # Create a link for @openveo/api cd /WORKSPACE_PATH/openveo-core/node_modules/@openveo/core/node_modules/@openveo/api npm link # Create a link for @openveo/test cd /WORKSPACE_PATH/openveo-core/node_modules/@openveo/core/node_modules/@openveo/test npm link","title":"Create NPM links for openveo-api and openveo-test"},{"location":"developers/installation/#openveo-devices-api","text":"","title":"OpenVeo Devices API"},{"location":"developers/installation/#clone-project-from-git","text":"# Clone project into workspace cd /WORKSPACE_PATH/ git clone git@github.com:veo-labs/openveo-devices-api.git Your workspace should look like this: . \u251c\u2500\u2500 openveo-core \u251c\u2500\u2500 openveo-devices-api","title":"Clone project from git"},{"location":"developers/installation/#install-projects-dependencies","text":"cd /WORKSPACE_PATH/openveo-devices-api npm ci","title":"Install project's dependencies"},{"location":"developers/installation/#link-openveo-api-and-openveo-test","text":"When installing OpenVeo Core we created NPM links for @openveo/api and @openveo/test. We can now refer to this links. # Install dependencies @openveo/api and @openveo/test using NPM links cd /WORKSPACE_PATH/openveo-devices-api npm link @openveo/api @openveo/test","title":"Link openveo-api and openveo-test"},{"location":"developers/installation/#install-plugin","text":"To be able to install @openveo/devices-api in @openveo/core we create an NPM link of @openveo/devices-api and refer to it in the core.","title":"Install plugin"},{"location":"developers/installation/#create-an-npm-link","text":"# Create a link for @openveo/devices-api cd /WORKSPACE_PATH/openveo-devices-api npm link","title":"Create an NPM link"},{"location":"developers/installation/#link-project-to-the-core","text":"# Install dependency @openveo/devices-api using NPM links cd /WORKSPACE_PATH/openveo-core npm link @openveo/devices-api","title":"Link project to the core"},{"location":"developers/unit-tests/","text":"Node.js unit tests Server side unit tests are performed using Mocha and Chai . You can launch server unit tests with the following command (from plugin's root directory): npm run test","title":"Unit tests"},{"location":"developers/unit-tests/#nodejs-unit-tests","text":"Server side unit tests are performed using Mocha and Chai . You can launch server unit tests with the following command (from plugin's root directory): npm run test","title":"Node.js unit tests"},{"location":"pluginsDevelopers/api/","text":"Server side API (Node.js) The OpenVeo Devices API helps you communicate with socket based devices inside your OpenVeo plugins. You can use process.api to get the OpenVeo Devices API : var devicesApi = process.api.getApi('devices-api');","title":"API"},{"location":"pluginsDevelopers/api/#server-side-api-nodejs","text":"The OpenVeo Devices API helps you communicate with socket based devices inside your OpenVeo plugins. You can use process.api to get the OpenVeo Devices API : var devicesApi = process.api.getApi('devices-api');","title":"Server side API (Node.js)"},{"location":"pluginsDevelopers/getting-started/","text":"Installation From OpenVeo root : npm install @openveo/devices-api --production Setup your devices Configure your devices to establish a socket connection on your OpenVeo socket server with namespace /devices-api/DEVICE_TYPE , replacing DEVICE_TYPE by the type of devices you want to communicate with (only veobox is supported right now). Use API You can now use the OpenVeo Devices API to get information from your devices : var devicesApi = process.api.getApi('devices-api'); var DEVICES_TYPES = devicesApi.getDevicesTypes(); var pilot = devicesApi.getPilot(DEVICES_TYPES.VEOBOX); pilot.on(pilot.EVENTS.AUTHENTICATED, function(id, deviceIp, socketId) { console.log('New device connected with id ' + id + ' and ip ' + deviceIp); }); Or control your devices : var devicesApi = process.api.getApi('devices-api'); var DEVICES_TYPES = devicesApi.getDevicesTypes(); var pilot = devicesApi.getPilot(DEVICES_TYPES.VEOBOX); pilot.askForStartRecord([deviceId], null, function(results) { console.log('Device ' + deviceId + ' is starting'); }); See the API for more information.","title":"Getting started"},{"location":"pluginsDevelopers/getting-started/#installation","text":"From OpenVeo root : npm install @openveo/devices-api --production","title":"Installation"},{"location":"pluginsDevelopers/getting-started/#setup-your-devices","text":"Configure your devices to establish a socket connection on your OpenVeo socket server with namespace /devices-api/DEVICE_TYPE , replacing DEVICE_TYPE by the type of devices you want to communicate with (only veobox is supported right now).","title":"Setup your devices"},{"location":"pluginsDevelopers/getting-started/#use-api","text":"You can now use the OpenVeo Devices API to get information from your devices : var devicesApi = process.api.getApi('devices-api'); var DEVICES_TYPES = devicesApi.getDevicesTypes(); var pilot = devicesApi.getPilot(DEVICES_TYPES.VEOBOX); pilot.on(pilot.EVENTS.AUTHENTICATED, function(id, deviceIp, socketId) { console.log('New device connected with id ' + id + ' and ip ' + deviceIp); }); Or control your devices : var devicesApi = process.api.getApi('devices-api'); var DEVICES_TYPES = devicesApi.getDevicesTypes(); var pilot = devicesApi.getPilot(DEVICES_TYPES.VEOBOX); pilot.askForStartRecord([deviceId], null, function(results) { console.log('Device ' + deviceId + ' is starting'); }); See the API for more information.","title":"Use API"}]}